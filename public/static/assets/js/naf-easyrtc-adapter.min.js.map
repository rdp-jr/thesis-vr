{"version":3,"sources":["webpack:///webpack/bootstrap 16a4d89c120e6400df20","webpack:///./src/index.js"],"names":["EasyRtcAdapter","easyrtc","window","url","appName","roomName","options","successListener","occupantListener","openListener","clientSentTime","Date","document","method","cache","serverReceivedTime","res","precision","clientReceivedTime","timeOffset","setTimeout","Promise","_","clientId","client","media","NAF","dataType","roomOccupants","roomOccupant","destination","targetRoom","status","that","easyrtcid","audioEnabled","myRoomId","joinTime","module"],"mappings":"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","file":"naf-easyrtc-adapter.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 16a4d89c120e6400df20","/* global NAF */\r\n\r\nclass EasyRtcAdapter {\r\n\r\n  constructor(easyrtc) {\r\n    this.easyrtc = easyrtc || window.easyrtc;\r\n    this.app = \"default\";\r\n    this.room = \"default\";\r\n\r\n    this.audioStreams = {};\r\n    this.pendingAudioRequest = {};\r\n\r\n    this.serverTimeRequests = 0;\r\n    this.timeOffsets = [];\r\n    this.avgTimeOffset = 0;\r\n  }\r\n\r\n  setServerUrl(url) {\r\n    this.easyrtc.setSocketUrl(url);\r\n  }\r\n\r\n  setApp(appName) {\r\n    this.app = appName;\r\n  }\r\n\r\n  setRoom(roomName) {\r\n    this.room = roomName;\r\n    this.easyrtc.joinRoom(roomName, null);\r\n  }\r\n\r\n  // options: { datachannel: bool, audio: bool }\r\n  setWebRtcOptions(options) {\r\n    // this.easyrtc.enableDebug(true);\r\n    this.easyrtc.enableDataChannels(options.datachannel);\r\n\r\n    this.easyrtc.enableVideo(false);\r\n    this.easyrtc.enableAudio(options.audio);\r\n\r\n    this.easyrtc.enableVideoReceive(false);\r\n    this.easyrtc.enableAudioReceive(true);\r\n  }\r\n\r\n  setServerConnectListeners(successListener, failureListener) {\r\n    this.connectSuccess = successListener;\r\n    this.connectFailure = failureListener;\r\n  }\r\n\r\n  setRoomOccupantListener(occupantListener) {\r\n    this.easyrtc.setRoomOccupantListener(function(\r\n      roomName,\r\n      occupants,\r\n      primary\r\n    ) {\r\n      occupantListener(occupants);\r\n    });\r\n  }\r\n\r\n  setDataChannelListeners(openListener, closedListener, messageListener) {\r\n    this.easyrtc.setDataChannelOpenListener(openListener);\r\n    this.easyrtc.setDataChannelCloseListener(closedListener);\r\n    this.easyrtc.setPeerListener(messageListener);\r\n  }\r\n\r\n  updateTimeOffset() {\r\n    const clientSentTime = Date.now() + this.avgTimeOffset;\r\n\r\n    return fetch(document.location.href, { method: \"HEAD\", cache: \"no-cache\" })\r\n      .then(res => {\r\n        var precision = 1000;\r\n        var serverReceivedTime = new Date(res.headers.get(\"Date\")).getTime() + (precision / 2);\r\n        var clientReceivedTime = Date.now();\r\n        var serverTime = serverReceivedTime + ((clientReceivedTime - clientSentTime) / 2);\r\n        var timeOffset = serverTime - clientReceivedTime;\r\n\r\n        this.serverTimeRequests++;\r\n\r\n        if (this.serverTimeRequests <= 10) {\r\n          this.timeOffsets.push(timeOffset);\r\n        } else {\r\n          this.timeOffsets[this.serverTimeRequests % 10] = timeOffset;\r\n        }\r\n\r\n        this.avgTimeOffset = this.timeOffsets.reduce((acc, offset) => acc += offset, 0) / this.timeOffsets.length;\r\n\r\n        if (this.serverTimeRequests > 10) {\r\n          setTimeout(() => this.updateTimeOffset(), 5 * 60 * 1000); // Sync clock every 5 minutes.\r\n        } else {\r\n          this.updateTimeOffset();\r\n        }\r\n      });\r\n  }\r\n\r\n  connect() {\r\n    Promise.all([\r\n      this.updateTimeOffset(),\r\n      new Promise((resolve, reject) => {\r\n        this._connect(this.easyrtc.audioEnabled, resolve, reject);\r\n      })\r\n    ]).then(([_, clientId]) => {\r\n      this._storeAudioStream(\r\n        this.easyrtc.myEasyrtcid,\r\n        this.easyrtc.getLocalStream()\r\n      );\r\n\r\n      this._myRoomJoinTime = this._getRoomJoinTime(clientId);\r\n      this.connectSuccess(clientId);\r\n    }).catch(this.connectFailure);\r\n  }\r\n\r\n  shouldStartConnectionTo(client) {\r\n    return this._myRoomJoinTime <= client.roomJoinTime;\r\n  }\r\n\r\n  startStreamConnection(clientId) {\r\n    this.easyrtc.call(\r\n      clientId,\r\n      function(caller, media) {\r\n        if (media === \"datachannel\") {\r\n          NAF.log.write(\"Successfully started datachannel to \", caller);\r\n        }\r\n      },\r\n      function(errorCode, errorText) {\r\n        NAF.log.error(errorCode, errorText);\r\n      },\r\n      function(wasAccepted) {\r\n        // console.log(\"was accepted=\" + wasAccepted);\r\n      }\r\n    );\r\n  }\r\n\r\n  closeStreamConnection(clientId) {\r\n    // Handled by easyrtc\r\n  }\r\n\r\n  sendData(clientId, dataType, data) {\r\n    // send via webrtc otherwise fallback to websockets\r\n    this.easyrtc.sendData(clientId, dataType, data);\r\n  }\r\n\r\n  sendDataGuaranteed(clientId, dataType, data) {\r\n    this.easyrtc.sendDataWS(clientId, dataType, data);\r\n  }\r\n\r\n  broadcastData(dataType, data) {\r\n    var roomOccupants = this.easyrtc.getRoomOccupantsAsMap(this.room);\r\n\r\n    // Iterate over the keys of the easyrtc room occupants map.\r\n    // getRoomOccupantsAsArray uses Object.keys which allocates memory.\r\n    for (var roomOccupant in roomOccupants) {\r\n      if (\r\n        roomOccupants[roomOccupant] &&\r\n        roomOccupant !== this.easyrtc.myEasyrtcid\r\n      ) {\r\n        // send via webrtc otherwise fallback to websockets\r\n        this.easyrtc.sendData(roomOccupant, dataType, data);\r\n      }\r\n    }\r\n  }\r\n\r\n  broadcastDataGuaranteed(dataType, data) {\r\n    var destination = { targetRoom: this.room };\r\n    this.easyrtc.sendDataWS(destination, dataType, data);\r\n  }\r\n\r\n  getConnectStatus(clientId) {\r\n    var status = this.easyrtc.getConnectStatus(clientId);\r\n\r\n    if (status == this.easyrtc.IS_CONNECTED) {\r\n      return NAF.adapters.IS_CONNECTED;\r\n    } else if (status == this.easyrtc.NOT_CONNECTED) {\r\n      return NAF.adapters.NOT_CONNECTED;\r\n    } else {\r\n      return NAF.adapters.CONNECTING;\r\n    }\r\n  }\r\n\r\n  getMediaStream(clientId) {\r\n    var that = this;\r\n    if (this.audioStreams[clientId]) {\r\n      NAF.log.write(\"Already had audio for \" + clientId);\r\n      return Promise.resolve(this.audioStreams[clientId]);\r\n    } else {\r\n      NAF.log.write(\"Waiting on audio for \" + clientId);\r\n      return new Promise(function(resolve) {\r\n        that.pendingAudioRequest[clientId] = resolve;\r\n      });\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    this.easyrtc.disconnect();\r\n  }\r\n\r\n  /**\r\n   * Privates\r\n   */\r\n\r\n  _storeAudioStream(easyrtcid, stream) {\r\n    this.audioStreams[easyrtcid] = stream;\r\n    if (this.pendingAudioRequest[easyrtcid]) {\r\n      NAF.log.write(\"got pending audio for \" + easyrtcid);\r\n      this.pendingAudioRequest[easyrtcid](stream);\r\n      delete this.pendingAudioRequest[easyrtcid](stream);\r\n    }\r\n  }\r\n\r\n  _connect(audioEnabled, connectSuccess, connectFailure) {\r\n    var that = this;\r\n\r\n    this.easyrtc.setStreamAcceptor(this._storeAudioStream.bind(this));\r\n\r\n    this.easyrtc.setOnStreamClosed(function(easyrtcid) {\r\n      delete that.audioStreams[easyrtcid];\r\n    });\r\n\r\n    if (audioEnabled) {\r\n      this.easyrtc.initMediaSource(\r\n        function() {\r\n          that.easyrtc.connect(that.app, connectSuccess, connectFailure);\r\n        },\r\n        function(errorCode, errmesg) {\r\n          NAF.log.error(errorCode, errmesg);\r\n        }\r\n      );\r\n    } else {\r\n      that.easyrtc.connect(that.app, connectSuccess, connectFailure);\r\n    }\r\n  }\r\n\r\n  _getRoomJoinTime(clientId) {\r\n    var myRoomId = NAF.room;\r\n    var joinTime = this.easyrtc.getRoomOccupantsAsMap(myRoomId)[clientId]\r\n      .roomJoinTime;\r\n    return joinTime;\r\n  }\r\n\r\n  getServerTime() {\r\n    return Date.now() + this.avgTimeOffset;\r\n  }\r\n}\r\n\r\nNAF.adapters.register(\"easyrtc\", EasyRtcAdapter);\r\n\r\nmodule.exports = EasyRtcAdapter;\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}