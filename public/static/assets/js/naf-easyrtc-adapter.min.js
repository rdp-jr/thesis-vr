(function(a){function b(d){if(c[d])return c[d].exports;var e=c[d]={i:d,l:!1,exports:{}};return a[d].call(e.exports,e,e.exports,b),e.l=!0,e.exports}var c={};return b.m=a,b.c=c,b.d=function(a,c,d){b.o(a,c)||Object.defineProperty(a,c,{configurable:!1,enumerable:!0,get:d})},b.n=function(a){var c=a&&a.__esModule?function(){return a['default']}:function(){return a};return b.d(c,'a',c),c},b.o=function(a,b){return Object.prototype.hasOwnProperty.call(a,b)},b.p='',b(b.s=0)})([function(a){'use strict';function b(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}var c=function(){function a(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{!d&&h['return']&&h['return']()}finally{if(e)throw f}}return c}return function(b,c){if(Array.isArray(b))return b;if(Symbol.iterator in Object(b))return a(b,c);throw new TypeError('Invalid attempt to destructure non-iterable instance')}}(),d=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,'value'in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),e=function(){function a(c){b(this,a),this.easyrtc=c||window.easyrtc,this.app='default',this.room='default',this.audioStreams={},this.pendingAudioRequest={},this.serverTimeRequests=0,this.timeOffsets=[],this.avgTimeOffset=0}return d(a,[{key:'setServerUrl',value:function(a){this.easyrtc.setSocketUrl(a)}},{key:'setApp',value:function(a){this.app=a}},{key:'setRoom',value:function(a){this.room=a,this.easyrtc.joinRoom(a,null)}},{key:'setWebRtcOptions',value:function(a){this.easyrtc.enableDataChannels(a.datachannel),this.easyrtc.enableVideo(!1),this.easyrtc.enableAudio(a.audio),this.easyrtc.enableVideoReceive(!1),this.easyrtc.enableAudioReceive(!0)}},{key:'setServerConnectListeners',value:function(a,b){this.connectSuccess=a,this.connectFailure=b}},{key:'setRoomOccupantListener',value:function(a){this.easyrtc.setRoomOccupantListener(function(b,c){a(c)})}},{key:'setDataChannelListeners',value:function(a,b,c){this.easyrtc.setDataChannelOpenListener(a),this.easyrtc.setDataChannelCloseListener(b),this.easyrtc.setPeerListener(c)}},{key:'updateTimeOffset',value:function(){var a=this,b=Date.now()+this.avgTimeOffset;return fetch(document.location.href,{method:'HEAD',cache:'no-cache'}).then(function(c){var d=new Date(c.headers.get('Date')).getTime()+1e3/2,e=Date.now(),f=d+(e-b)/2-e;a.serverTimeRequests++,10>=a.serverTimeRequests?a.timeOffsets.push(f):a.timeOffsets[a.serverTimeRequests%10]=f,a.avgTimeOffset=a.timeOffsets.reduce(function(a,b){return a+=b},0)/a.timeOffsets.length,10<a.serverTimeRequests?setTimeout(function(){return a.updateTimeOffset()},300000):a.updateTimeOffset()})}},{key:'connect',value:function(){var a=this;Promise.all([this.updateTimeOffset(),new Promise(function(b,c){a._connect(a.easyrtc.audioEnabled,b,c)})]).then(function(b){var d=c(b,2),e=d[0],f=d[1];a._storeAudioStream(a.easyrtc.myEasyrtcid,a.easyrtc.getLocalStream()),a._myRoomJoinTime=a._getRoomJoinTime(f),a.connectSuccess(f)}).catch(this.connectFailure)}},{key:'shouldStartConnectionTo',value:function(a){return this._myRoomJoinTime<=a.roomJoinTime}},{key:'startStreamConnection',value:function(a){this.easyrtc.call(a,function(a,b){'datachannel'===b&&NAF.log.write('Successfully started datachannel to ',a)},function(a,b){NAF.log.error(a,b)},function(){})}},{key:'closeStreamConnection',value:function(){}},{key:'sendData',value:function(a,b,c){this.easyrtc.sendData(a,b,c)}},{key:'sendDataGuaranteed',value:function(a,b,c){this.easyrtc.sendDataWS(a,b,c)}},{key:'broadcastData',value:function(a,b){var c=this.easyrtc.getRoomOccupantsAsMap(this.room);for(var d in c)c[d]&&d!==this.easyrtc.myEasyrtcid&&this.easyrtc.sendData(d,a,b)}},{key:'broadcastDataGuaranteed',value:function(a,b){var c={targetRoom:this.room};this.easyrtc.sendDataWS(c,a,b)}},{key:'getConnectStatus',value:function(a){var b=this.easyrtc.getConnectStatus(a);return b==this.easyrtc.IS_CONNECTED?NAF.adapters.IS_CONNECTED:b==this.easyrtc.NOT_CONNECTED?NAF.adapters.NOT_CONNECTED:NAF.adapters.CONNECTING}},{key:'getMediaStream',value:function(a){var b=this;return this.audioStreams[a]?(NAF.log.write('Already had audio for '+a),Promise.resolve(this.audioStreams[a])):(NAF.log.write('Waiting on audio for '+a),new Promise(function(c){b.pendingAudioRequest[a]=c}))}},{key:'disconnect',value:function(){this.easyrtc.disconnect()}},{key:'_storeAudioStream',value:function(a,b){this.audioStreams[a]=b,this.pendingAudioRequest[a]&&(NAF.log.write('got pending audio for '+a),this.pendingAudioRequest[a](b),delete this.pendingAudioRequest[a](b))}},{key:'_connect',value:function(a,b,c){var d=this;this.easyrtc.setStreamAcceptor(this._storeAudioStream.bind(this)),this.easyrtc.setOnStreamClosed(function(a){delete d.audioStreams[a]}),a?this.easyrtc.initMediaSource(function(){d.easyrtc.connect(d.app,b,c)},function(a,b){NAF.log.error(a,b)}):d.easyrtc.connect(d.app,b,c)}},{key:'_getRoomJoinTime',value:function(a){var b=NAF.room,c=this.easyrtc.getRoomOccupantsAsMap(b)[a].roomJoinTime;return c}},{key:'getServerTime',value:function(){return Date.now()+this.avgTimeOffset}}]),a}();NAF.adapters.register('easyrtc',e),a.exports=e}]);
//# sourceMappingURL=naf-easyrtc-adapter.min.js.map